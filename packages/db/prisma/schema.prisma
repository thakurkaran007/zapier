generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  emailVerified     DateTime?
  password          String? 
  image             String?
  role              UserRole            @default(USER)
  accounts          Account[]
  zaps              Zap[]
}

  model Account {
    id                 String  @id @default(cuid()) @map("_id")
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
  
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    @@unique([provider, providerAccountId])
    @@map("accounts")
  }

model Zap {
  id                String   @id @default(cuid())
  userId            String
  user              User @relation(fields: [userId], references: [id])
  trigger           Trigger?
  actions           Action[]
  zapRuns           ZapRun[]
}

model Trigger {
  id                         String   @id @default(cuid())
  zapId                      String   @unique
  availableTriggerId         String
  type                       AvailableTrigger @relation(fields: [availableTriggerId], references: [id])
  zap                        Zap @relation(fields: [zapId], references: [id])
}

model Action {
  id                         String @id @default(cuid())
  zapId                      String
  availableActionId          String
  metaData                   Json
  zap                        Zap @relation(fields: [zapId], references: [id])
  type                       AvailableAction @relation(fields: [availableActionId], references: [id])
  sortingOrder               Int @default(0)
}

model AvailableAction { 
  id                String @id @default(cuid())
  name              String
  image             String
  actions           Action[]
} 

model AvailableTrigger {
  id                String   @id @default(cuid())
  name              String
  image             String
  triggers          Trigger[]
}


model VerificationToken {
  id                  String   @id @default(cuid())
  email               String
  token               String   @unique
  expires             DateTime

  @@unique([email, token])
}

model ZapRun {
  id                  String @id @default(cuid())
  zapId               String
  metaData            Json  
  zap                 Zap @relation(fields: [zapId], references: [id])
  zapRunOutBox        ZapRunOutBox?
}

model ZapRunOutBox {
  id                  String @id @default(cuid())
  zapRunId            String @unique
  zapRun              ZapRun @relation(fields: [zapRunId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

